import logging
import sys
import time,json,os
import random

import telebot
from telebot import types

API_TOKEN = '—Ç–æ–∫–µ–Ω'

bot = telebot.TeleBot(API_TOKEN)
telebot.logger.setLevel(logging.DEBUG)
fileUsers = open("/test/vagina-bot/usersDB.json",'r+')
users = json.loads(fileUsers.read())

def info():
    return '–ê–≤—Ç–æ—Ä: @Pomorgite\n–ì–∏—Ç—Ö–∞–±: https://github.com/MrCheatEugene/vaginasize\n–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –≤ 00:00 –ø–æ –ú–°–ö.\n–í–Ω–∏–º–∞–Ω–∏–µ!\n–ë–æ—Ç —Å–æ–∑–¥–∞–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö —Ü–µ–ª—è—Ö, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º. \n–ê–≤—Ç–æ—Ä –Ω–µ –ø—Ä–µ—Å–ª–µ–¥—É–µ—Ç —Ü–µ–ª–∏ –∫–æ–≥–æ-—Ç–æ —É–Ω–∏–∑–∏—Ç—å –∏–ª–∏ –æ—Å–∫–æ—Ä–±–∏—Ç—å.\n–õ—é–±—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω—ã.';

def foolOfDay():
    return '–î–æ–ª–±–æ—ë–± –¥–Ω—è - '+open("/test/vagina-bot/foolOfDay",'r').readline()+". –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –µ–≥–æ!";

def pairOfDay():
    return '–ü–∞—Ä–∞ –¥–Ω—è - '+(open("/test/vagina-bot/pairOfDay",'r').readline()).replace("{ANDSIGN}","–∏")+". –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –∏—Ö!";

def nicestOfDay():
    return '–ö—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è - '+open("/test/vagina-bot/nicestOfDay",'r').readline()+". –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –µ–≥–æ!";

def getStats(username):
    if(username in users and len(users[username]) >=5):
        return '–ù–∞—Å—Ç—É—á–∞–ª(–∞) —Å–∏–º–≤–æ–ª–æ–≤: '+str(users[username][4])+'\n–ù–∞–ø–∏—Å–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–π:'+str(users[username][3]);
    else:
        return '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö.'

def updateUsers(fileUsers,users):
    fileUsers.close()
    os.remove("/test/vagina-bot/usersDB.json")
    os.mknod("/test/vagina-bot/usersDB.json")
    fileUsers = open("/test/vagina-bot/usersDB.json",'r+')
    fileUsers.write(json.dumps(users))
    fileUsers.close()
    fileUsers = open("/test/vagina-bot/usersDB.json",'r+')
    users = json.loads(fileUsers.read())
    return 0

def size(username):
    print("used by "+username)
    userinfo = users.get(username)
    print(userinfo)

    size = ""
    numSize=0
    isMale =1
    if (isinstance(userinfo,list) == False or len(userinfo) < 3 or userinfo[0] == 200 or userinfo[1] == 200 ):
        if(random.randint(1,100)%2 == 0):
            size+="—á–ª–µ–Ω –¥–ª–∏–Ω–Ω–æ–π "
            numSize=random.randint(3,35)
            isMale = 1
        else:
            size=size+"–≤–∞–≥–∏–Ω–∞ –≥–ª—É–±–∏–Ω–æ–π "
            numSize=random.randint(10, 30)
            isMale=0
        pass
        size+=str(numSize)
        users[username] = [];
        users[username].append(isMale)
        users[username].append(numSize)
        users[username].append(200)
        updateUsers(fileUsers,users)
    elif(isinstance(userinfo,list) and len(userinfo) >=3):
        numSize = userinfo[1]
        isMale = userinfo[0]
        if(isMale == 1):
            size+="—á–ª–µ–Ω –¥–ª–∏–Ω–Ω–æ–π "
        else:
            size=size+"–≤–∞–≥–∏–Ω–∞ –≥–ª—É–±–∏–Ω–æ–π "
        size+=str(numSize)
    if(isMale == 0 and numSize < 13):
        size+=' üëç'
    elif(isMale == 0 and numSize > 13):
        size+=' üò≥'
    elif(isMale == 0 and numSize > 20):
        size+=' ü§Ø'
    elif(isMale == 1 and numSize > 30):
        size+=' ü§Ø'
    elif(isMale == 1 and numSize > 20):
        size+=' üëçüòä'
    elif(isMale == 1 and numSize > 15):
        size+=' üëç'
    elif(isMale == 1 and numSize < 15):
        size+=' üòî'
    elif(isMale == 1 and numSize < 10):
        size+=' üò¢'
    elif(isMale == 1 and numSize < 5):
        size+=' üò≠üò≠üò≠üò≠üò≠'
    else:
        size+=' üëç'
    pass
    return "–£ @"+username+" "+size+" —Å–º!"
def test(username):
    userinfo = users.get(username)
    lines = 0
    if (isinstance(userinfo,list) == False or len(userinfo) < 3):
        lines = random.randint(0,3)
        if(isinstance(userinfo,list) == False):
            users[username]= []
        users[username].append(200)
        users[username].append(200)
        users[username].append(lines)
        updateUsers(fileUsers,users)
    elif(isinstance(userinfo,list) and len(userinfo) == 3  and userinfo[2] != 200):
        lines= userinfo[2]
    linesMeaning= ""
    strLines = ""
    if(lines == 0):
        strLines="–ø–æ–ª–æ—Å–æ–∫"
        linesMeaning = "–£ @"+username+" –Ω–µ —Ö–≤–∞—Ç–∏–ª–æ –¥–µ–Ω–µ–≥ –Ω–∞ —Ç–µ—Å—Ç."
    elif(lines == 1):
        strLines="–ø–æ–ª–æ—Å–∫–∞"
        linesMeaning = "@"+username+" —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∑–∞–±–µ—Ä–µ–º–µ–Ω–µ–ª(–∞)."
    elif(lines == 2):
        strLines="–ø–æ–ª–æ—Å–∫–∏"
        linesMeaning = "@"+username+" –∑–∞–±–µ—Ä–µ–º–µ–Ω–µ–ª(–∞). –£–∂–µ "+str(random.randint(1,9))+" –º–µ—Å—è—Ü! –ò–ª–∏ –µ—Å–ª–∏ "+"@"+username+" –º—É–∂–∏–∫, —Ç–æ –≤–µ—Ä–æ—è—Ç–Ω–µ–µ –≤—Å–µ–≥–æ —É –Ω–µ–≥–æ —Ä–∞–∫. F."
    elif(lines== 3):
        strLines="–ø–æ–ª–æ—Å–∫–∏"
        linesMeaning = "@"+username+" —Å–ª—É—á–∞–π–Ω–æ –æ–±–æ—Å—Ä–∞–ª —Ç–µ—Å—Ç. –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–ª–∞–¥–∫–∏–π —Ö–ª–µ–±—É—à–µ–∫."
    #escapedmsg = str("–£ @"+username+" "+str(lines)+" "+strLines+". "+linesMeaning).replace("_", "\\_").replace("*", "\\*").replace("[", "\\[").replace("`", "\\`").replace(".", "\\.").replace("(", "\\(").replace(")", "\\)")
    escapedmsg = str("–£ @"+username+" "+str(lines)+" "+strLines+". "+linesMeaning)
    return escapedmsg
@bot.message_handler(commands=['size','test','info','nicestofday','foolofday','pairofday','stats'])
def send_welcome(message):
    if not(message.from_user.username in users):
        users[message.from_user.username] = "unknown"
        updateUsers(fileUsers,users)
        print("NEW USER!")
    if(message.content_type == 'text' and message.text =="/size"):
        bot.reply_to(message, size(message.from_user.username))
    elif(message.content_type == 'text' and message.text=="/test"):
        bot.reply_to(message, test(message.from_user.username))
    elif(message.content_type == 'text' and message.text=="/info"):
        bot.reply_to(message, info())
    elif(message.content_type == 'text' and message.text=="/foolofday"):
        bot.reply_to(message, foolOfDay())
    elif(message.content_type == 'text' and message.text=="/pairofday"):
        bot.reply_to(message, pairOfDay())
    elif(message.content_type == 'text' and message.text=="/nicestofday"):
        bot.reply_to(message, nicestOfDay())
    elif(message.content_type == 'text' and message.text=="/stats"):
        bot.reply_to(message, getStats(message.from_user.username))
@bot.inline_handler(lambda query: len(query.query) == 0)
@bot.inline_handler(lambda query: query.query == 'size')
def query_text(inline_query):
    if not(inline_query.from_user.username in users):
        users[inline_query.from_user.username] = "unknown"
        updateUsers(fileUsers,users)
        print("NEW USER!")
    commandsize = types.InlineQueryResultArticle(str(int(inline_query.id)+random.randint(0,999)),'size',types.InputTextMessageContent(message_text = size(inline_query.from_user.username)), description = "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä –≤–∞–≥–∏–Ω—ã/—á–ª–µ–Ω–∞")
    commandtest = types.InlineQueryResultArticle(str(int(inline_query.id)+random.randint(0,999)), 'test', types.InputTextMessageContent(message_text = test(inline_query.from_user.username)), description = "–¢–µ—Å—Ç –Ω–∞ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å")
    commandinfo = types.InlineQueryResultArticle(str(int(inline_query.id)+random.randint(0,999)), 'info', types.InputTextMessageContent(message_text = info()), description = "–ù–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ—ã –æ –±–æ—Ç–∏–∫–µ")
    commandnice = types.InlineQueryResultArticle(str(int(inline_query.id)+random.randint(0,999)),'nicestOfDay',types.InputTextMessageContent(message_text = nicestOfDay()), description = "–ö—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è")
    commandfool = types.InlineQueryResultArticle(str(int(inline_query.id)+random.randint(0,999)),'foolOfDay',types.InputTextMessageContent(message_text = foolOfDay()), description = "–î–æ–ª–±–æ—ë–± –¥–Ω—è")
    commandpair = types.InlineQueryResultArticle(str(int(inline_query.id)+random.randint(0,999)),'pairOfDay',types.InputTextMessageContent(message_text = pairOfDay()), description = "–ü–∞—Ä–∞ –¥–Ω—è")
    commandstats = types.InlineQueryResultArticle(str(int(inline_query.id)+random.randint(0,999)),'stats',types.InputTextMessageContent(message_text = getStats(inline_query.from_user.username)), description = "–°—Ä–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ")
    bot.answer_inline_query(inline_query.id, [commandsize,commandtest,commandinfo,commandnice,commandfool,commandpair,commandstats], cache_time=1)
def default_query(inline_query):
    try:
         if not(inline_query.from_user.username in users):
             users[inline_query.from_user.username] = "unknown"
             updateUsers(fileUsers,users)
             print("NEW USER!")
         commandsize = types.InlineQueryResultArticle(str(int(inline_query.id)+random.randint(0,999)),'size',types.InputTextMessageContent(message_text = size(inline_query.from_user.username)), description = "–£–∑–Ω–∞—Ç—å —Å–≤–æ–π —Ä–∞–∑–º–µ—Ä –≤–∞–≥–∏–Ω—ã/—á–ª–µ–Ω–∞")
         commandtest = types.InlineQueryResultArticle(str(int(inline_query.id)+random.randint(0,999)), 'test', types.InputTextMessageContent(message_text = test(inline_query.from_user.username)), description = "–¢–µ—Å—Ç –Ω–∞ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å")
         commandinfo = types.InlineQueryResultArticle(str(int(inline_query.id)+random.randint(0,999)), 'info', types.InputTextMessageContent(message_text = info()), description = "–ù–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ—ã –æ –±–æ—Ç–∏–∫–µ")
         commandnice = types.InlineQueryResultArticle(str(int(inline_query.id)+random.randint(0,999)),'nicestOfDay',types.InputTextMessageContent(message_text = nicestOfDay()), description = "–ö—Ä–∞—Å–∞–≤—á–∏–∫ –¥–Ω—è")
         commandfool = types.InlineQueryResultArticle(str(int(inline_query.id)+random.randint(0,999)),'foolOfDay',types.InputTextMessageContent(message_text = foolOfDay()), description = "–î–æ–ª–±–æ—ë–± –¥–Ω—è")
         commandpair = types.InlineQueryResultArticle(str(int(inline_query.id)+random.randint(0,999)),'pairOfDay',types.InputTextMessageContent(message_text = pairOfDay()), description = "–ü–∞—Ä–∞ –¥–Ω—è")
         commandstats = types.InlineQueryResultArticle(str(int(inline_query.id)+random.randint(0,999)),'stats',types.InputTextMessageContent(message_text = getStats(inline_query.from_user.username)), description = "–°—Ä–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ")
         bot.answer_inline_query(inline_query.id, [commandsize,commandtest,commandinfo,commandnice,commandfool,commandpair,commandstats], cache_time=1)
    except Exception as e:
        print(e)

@bot.message_handler(func=lambda message: True)
def onmessage(message):
    if not(message.from_user.username in users):
        users[message.from_user.username] = "unknown"
        updateUsers(fileUsers,users)
        print("NEW USER!")

    if not(isinstance(users[message.from_user.username],list)):
        users[message.from_user.username] = []

    if(len(users[message.from_user.username]) < 3):
        while (len(users[message.from_user.username]) <3):
            users[message.from_user.username].append(200)
            pass
    if(len(users[message.from_user.username]) >= 3):
        if(len(users[message.from_user.username]) >=4):
            users[message.from_user.username][3] =users[message.from_user.username][3]+1;
        else:
            users[message.from_user.username].append(1)
        if(len(users[message.from_user.username]) >=5):
            users[message.from_user.username][4] =users[message.from_user.username][4]+len(message.text)
        else:
            users[message.from_user.username].append(len(message.text))
    updateUsers(fileUsers,users)


def main_loop():
    bot.infinity_polling()
    while 1:
        time.sleep(3)


if __name__ == '__main__':
    try:
        main_loop()
    except KeyboardInterrupt:
        print('\nExiting by user request.\n')
        sys.exit(0)